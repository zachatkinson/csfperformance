<div class="color-scheme-3">
  <div class="{% if section.settings.include_margins %}page-width{% endif %}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}">
    <div class="slider-grid container">
      <div class="csf-slider-left">
        {% for block in section.blocks %}
          {%  assign link = '#' %}
          {% if block.type == 'side-link' %}
            {% if block.settings.side-link-url %}
              {% assign link = block.settings.side-link-url %}
            {% endif %}
            <a href="{{ link }}" class="slider-anchor">{{  block.settings.image | image_url: width: 600 | image_tag: alt: block.settings.side-link-alt-text }}</a>

          {% endif %}
        {% endfor %}
      </div>
      <div class="csf-slider-right" data-auto-rotate="{% if section.settings.auto_rotate_interval %}{{ section.settings.auto_rotate_interval | times: 1000 }}{% else %}5000{% endif %}">
        {% assign slide_count = 0 %}
        {% for block in section.blocks %}
      
          {% if block.type == 'slide' %}
            <a href="{{ block.settings.slide-url }}" class="slider-anchor slide-{{ slide_count }}">
              <picture>
                <!-- The mobile source loads when the screen is 767px wide or less -->
                <source
                        media="(max-width: 767px)"
                        srcset="{{ block.settings.mobile-image | image_url: width: 768 }}"
                >
                <!-- Fallback/desktop image -->
                <img
                        src="{{ block.settings.slide-image | image_url: width: 1920 }}"
                        alt="{{ block.settings.slide-alt-text }}"
                        draggable="false"
                >
              </picture>
            </a>
            {% assign slide_count = slide_count | plus: 1 %}
          {% endif %}
        {% endfor %}
        {% assign total_slides = slide_count | plus: 0 %}
        {% assign dots_max = total_slides | minus: 1 %}
        <!-- DEBUG: total_slides = {{ total_slides }} -->
        {% if section.settings.show_arrows and total_slides > 1 %}
          <button class="csf-slider-arrow csf-slider-arrow--prev" aria-label="Previous slide" tabindex="0" type="button"><span aria-hidden="true">&#10094;</span></button>
          <button class="csf-slider-arrow csf-slider-arrow--next" aria-label="Next slide" tabindex="0" type="button"><span aria-hidden="true">&#10095;</span></button>
        {% endif %}
        {% if section.settings.show_dots and total_slides > 1 %}
          <div class="csf-slider-dots-wrapper" aria-label="Slide navigation" role="tablist">
            {% for i in (0..dots_max) %}
              <button class="csf-slider-dot" role="tab" aria-label="Go to slide {{ i | plus: 1 }}" aria-selected="false" tabindex="-1" data-slide="{{ i }}"></button>
            {% endfor %}
          </div>
        {% endif %}
      </div>
    </div>
  </div>
</div>
{% schema %}
{
  "name": "CSF Slider",
  "settings": [
    {
      "type": "checkbox",
      "id": "include_margins",
      "default": true,
      "label": "t:sections.csf-slider.settings.include_margins.label"
    },
    {
      "type": "checkbox",
      "id": "reveal_on_scroll",
      "default": true,
      "label": "t:sections.csf-slider.settings.reveal_on_scroll.label"
    },
    {
      "type": "checkbox",
      "id": "show_arrows",
      "default": true,
      "label": "Show navigation arrows (desktop only)"
    },
    {
      "type": "checkbox",
      "id": "show_dots",
      "default": true,
      "label": "Show navigation dots (desktop only)"
    },
    {
      "type": "range",
      "id": "auto_rotate_interval",
      "label": "Auto-rotate interval (seconds)",
      "min": 3,
      "max": 20,
      "step": 1,
      "default": 5
    }
  ],
  "presets": [
    {
      "name": "CSF Slider"
    }
  ],
  "blocks": [
    {
      "name": "Side Link",
      "type": "side-link",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "text",
          "id": "side-link-alt-text",
          "label": "Alt Text"
        },
        {
          "type": "url",
          "id": "side-link-url",
          "label": "t:sections.image-with-text.blocks.button.settings.button_link.label"
        }
      ]
    },
    {
      "name": "Slide",
      "type": "slide",
      "settings": [
        {
          "type": "image_picker",
          "id": "slide-image",
          "label": "Desktop Image"
        },
        {
          "type": "image_picker",
          "id": "mobile-image",
          "label": "Mobile Image"
        },
        {
          "type": "text",
          "id": "slide-alt-text",
          "label": "Alt Text"
        },
        {
          "type": "url",
          "id": "slide-url",
          "label": "t:sections.image-with-text.blocks.button.settings.button_link.label"
        }
      ]
    }
  ]

}
{% endschema %}
{% stylesheet %}
.slider-grid{
display: grid;
grid-template-columns: 1fr;
}
.csf-slider-left{
display: grid;
grid-template-columns: 1fr 1fr;
order: 1;
}
.csf-slider-left img{
width: 100%;
height: auto;
}
.csf-slider-right{
order: 0;
position: relative;
}
.csf-slider-right a {
  display: block;
opacity: 0;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  transition: opacity 0.5s ease-in-out;
  pointer-events: none;
}

.csf-slider-right a.active {
opacity: 1;
  pointer-events: auto;
  position: relative;
aspect-ratio: 4/5;
}
.csf-slider-right img{
object-fit: cover;
width: 100%;
}

.slider-anchor{
line-height: 0;
font-size: 0;
}

.csf-slider-arrow {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background: rgba(0,0,0,0.7);
  color: #fff;
  border: none;
  border-radius: 50%;
  width: 3rem;
  height: 3rem;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 2rem;
  cursor: pointer;
  z-index: 10;
}
.csf-slider-arrow--prev { left: 1rem; }
.csf-slider-arrow--next { right: 1rem; }
@media (max-width: 1024px) {
  .csf-slider-arrow { display: none !important; }
}

/* Hide blaze slider arrows that may bleed into csf-slider */
.csf-slider-right .blaze-prev,
.csf-slider-right .blaze-next {
  display: none !important;
}

@media screen and (min-width: 768px) {
.slider-grid{
grid-template-columns: 1fr;
}
.csf-slider-left{
grid-template-columns: 1fr 1fr 1fr;
order: 1;
}
.csf-slider-left img{
width: 100%;
}
.csf-slider-right{
order: 0;
width: 100%;
height: auto;
}

.csf-slider-right a.active {
display: block;
opacity: 1;
aspect-ratio: 3/1;
}
}

@media screen and (min-width: 1920px) {
.csf-slider-left{
grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;
}
}

.csf-slider-dots-wrapper {
  position: absolute;
  bottom: 1.5rem;
  top: auto;
  left: 50%;
  transform: translateX(-50%);
  background: #000;
  border-radius: 2rem;
  padding: 0.5rem 1.5rem;
  display: flex;
  flex-direction: row;
  gap: 1rem;
  z-index: 10;
  align-items: center;
  justify-content: center;
  min-height: 2.5rem;
  pointer-events: auto;
}
.csf-slider-dot {
  width: 1.25rem;
  height: 1.25rem;
  border-radius: 50%;
  background: #fff;
  border: none;
  cursor: pointer;
  transition: background 0.2s, box-shadow 0.2s;
  margin: 0;
  outline: none;
  box-shadow: 0 0 0 2px transparent;
}
.csf-slider-dot.active,
.csf-slider-dot[aria-selected="true"] {
  background: rgb(227, 42, 55);
  box-shadow: 0 0 0 2px #fff;
}
.csf-slider-dot:focus {
  box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgb(227, 42, 55);
}
@media (max-width: 1024px) {
  .csf-slider-dots-wrapper { display: none !important; }
}

{% endstylesheet %}
{% javascript %}
document.addEventListener("DOMContentLoaded", function() {
  const slider = document.querySelector('.csf-slider-right');
  const slides = slider.querySelectorAll('.slider-anchor');
  const prevArrow = slider.querySelector('.csf-slider-arrow--prev');
  const nextArrow = slider.querySelector('.csf-slider-arrow--next');
  const dots = slider.querySelectorAll('.csf-slider-dot');
let currentIndex = 0;
  let startX = 0;
  let isDragging = false;
  let isMouseDown = false;
  let mouseStartX = 0;
  let autoRotateInterval = parseInt(slider.dataset.autoRotate) || 5000;
  let autoRotateTimer = null;

function showSlide(index) {
slides.forEach((slide, i) => {
      slide.classList.toggle('active', i === index);
    });
    dots.forEach((dot, i) => {
      dot.classList.toggle('active', i === index);
      dot.setAttribute('aria-selected', i === index ? 'true' : 'false');
      dot.setAttribute('tabindex', i === index ? '0' : '-1');
});
    currentIndex = index;
}

function nextSlide() {
    showSlide((currentIndex + 1) % slides.length);
  }
  function prevSlide() {
    showSlide((currentIndex - 1 + slides.length) % slides.length);
  }

  function startAutoRotate() {
    if (slides.length > 1) {
      autoRotateTimer = setInterval(nextSlide, autoRotateInterval);
    }
  }
  function stopAutoRotate() {
    if (autoRotateTimer) clearInterval(autoRotateTimer);
    autoRotateTimer = null;
  }

  if (prevArrow && nextArrow) {
    prevArrow.addEventListener('click', prevSlide);
    nextArrow.addEventListener('click', nextSlide);
}

  // Dots navigation
  dots.forEach((dot, i) => {
    dot.addEventListener('click', () => {
      showSlide(i);
      stopAutoRotate();
      startAutoRotate();
    });
    dot.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        showSlide(i);
        stopAutoRotate();
        startAutoRotate();
      }
    });
  });

  // Touch/Swipe/Drag support for mobile/tablet
  slider.addEventListener('touchstart', (e) => {
    if (e.touches.length === 1) {
      startX = e.touches[0].clientX;
      isDragging = true;
    }
  });
  slider.addEventListener('touchmove', (e) => {
    if (!isDragging) return;
    let diff = e.touches[0].clientX - startX;
    if (Math.abs(diff) > 50) {
      if (diff > 0) prevSlide();
      else nextSlide();
      isDragging = false;
      stopAutoRotate();
      startAutoRotate();
    }
  });
  slider.addEventListener('touchend', () => {
    isDragging = false;
  });

  // Mouse drag navigation for desktop
  function isTouchDevice() {
    return 'ontouchstart' in window || navigator.maxTouchPoints > 0;
  }
  if (!isTouchDevice()) {
    slider.addEventListener('mousedown', (e) => {
      isMouseDown = true;
      mouseStartX = e.clientX;
    });
    slider.addEventListener('mousemove', (e) => {
      if (!isMouseDown) return;
      let diff = e.clientX - mouseStartX;
      if (Math.abs(diff) > 50) {
        if (diff > 0) prevSlide();
        else nextSlide();
        isMouseDown = false;
        stopAutoRotate();
        startAutoRotate();
      }
    });
    slider.addEventListener('mouseup', () => {
      isMouseDown = false;
    });
    slider.addEventListener('mouseleave', () => {
      isMouseDown = false;
    });
    // Prevent default drag behavior on images/slides
    slider.addEventListener('dragstart', function(e) {
      e.preventDefault();
    });
  }

  // Initial state
  showSlide(0);
  startAutoRotate();
});
{% endjavascript %}